services:
  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:9092  # For internal and external access
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:9093 
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT_MS: 
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    depends_on:
      - zookeeper
    networks:
      - kafka-network

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
    networks:
      - kafka-network

  # Spark Master
  spark-master:
    image: bitnami/spark:3.4.1
    container_name: spark-master
    ports:
      - "7077:7077"
      - "8081:8080"
    environment:
      SPARK_MODE: master
    volumes:
      - ./jobs:/opt/bitnami/spark/jobs
      - ./dataset:/opt/bitnami/spark/dataset
    networks:
      - kafka-network

  # MongoDB
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - kafka-network


  python-producer:
    build:
      context: ./
      dockerfile: Dockerfile
    container_name: python-producer
    environment:
      CLIENT_ID: H-Qeju7I7MgIxZqSyTPjFA
      CLIENT_SECRET: 3mzBlPjuS7iU5ILJ9tMS65wEdeSOCQ
      USER_AGENT: King
    depends_on:
      - kafka
    networks:
      - kafka-network

  python-consumer:
    build:
      context: ./
      dockerfile: Dockerfile-consumer
    container_name: python-consumer
    environment:
      KAFKA_BROKER: kafka:9092
    depends_on:
      - kafka
    networks:
      - kafka-network
    volumes:
    - ./jobs:/app/jobs
    - ./dataset:/app/dataset

volumes:
  mongo-data:

networks:
  kafka-network:
    driver: bridge



  # Spark Worker 1
  # spark-worker-1:
  #   image: bitnami/spark:latest
  #   container_name: spark-worker-1
  #   ports:
  #     - "8082:8080"
  #   environment:
  #     SPARK_MODE: worker
  #     SPARK_MASTER_URL: spark://spark-master:7077
  #   command: ["/opt/bitnami/scripts/spark/run.sh"]
  #   volumes:
  #     - ./jobs:/opt/bitnami/spark/jobs
  #     - ./dataset:/opt/bitnami/spark/dataset
  #   depends_on:
  #     - spark-master
  #   networks:
  #     - kafka-network

  # # Spark Worker 2
  # spark-worker-2:
  #   image: bitnami/spark:latest
  #   container_name: spark-worker-2
  #   ports:
  #     - "8083:8080"
  #   environment:
  #     SPARK_MODE: worker
  #     SPARK_MASTER_URL: spark://spark-master:7077
  #   command: ["/opt/bitnami/scripts/spark/run.sh"]
  #   volumes:
  #     - ./jobs:/opt/bitnami/spark/jobs
  #     - ./dataset:/opt/bitnami/spark/dataset
  #   depends_on:
  #     - spark-master
  #   networks:
  #     - kafka-network
